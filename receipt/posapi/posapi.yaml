openapi: "3.0.1"

info:
  title: POS API
  version: "1.4.5"
  x-logo:
    url: "../../assets/kivra-logo.svg"
    altText: Kivra logo

  description: >
    [Changelog - 2025-03-11](changelog/)

    # Digital Receipts Platform API

    Kivra's digital receipt platform API, is a REST based API intended for Kivra partners and customers.
    The API is designed to receive receipts in specific XML and JSON formats. The API grants accessibility and management
    of digital receipts.

    ## Getting started

    <details><summary>Setting up the first store</summary>

      ### Setting up the first store

      Receipt producers are regarded as partners i.e. they are free to set up digital receipts for as many organisations as they want.
      In order to start creating digital receipts using the POS API, a test store needs to be set up.

      Every store needs to be a part of a chain.

      1. Use your company credential to fetch a partner token
      2. Use your partner token to create a chain using the createChain method.

      After your chain has been created you receive a chain_id. Now a store can be created and connected to this chain.

      3. Use your partner token, or fetch it again if it is expired.
      4. Create a store using the addStore method.
      5. In the request body use the chain_id as owner id.

      After the store has been successfully created you will receive a store_id.

    </details>

    <details><summary>Creating digital receipts</summary>

      ### Digital receipts

      #### Receipt content

      The receipt content sent to Kivra is based on a json schema. There are 4 different kinds of receipt types supported:

      - Sales (a receipt with only sales items)
      - Return (a receipt with only return items)
      - Combined sales/return (a receipt with both sales and return items)
      - Greenbin (a receipt without recipient, the receipt will end up in a digital waste bin)

      All types are built the same way, using the same json schema as base. There are a few properties within the receipt that differs depending on type.

      When a digital receipt is created it is important that a verified user identifier is present (unless greenbin receipt) in the receipt data.
      The verified identifiers are

      - Social security number
      - Email
      - Mobile phone number
      - Credit/Debit card token

      For more information on receipt content and schemas used, see.
      [Digital receipt JSON schema explained and example receipts](/receipt/wiki/mdwiki.html)
      

      #### Send a digital receipt
      1. Use a partner, chain or store token to send/create receipts. The partner token is used to create a chain or store token.
      2. Use the store id (returned when the store is created) as service id in the body of the Create Receipt method.

    </details>

    <details><summary>Return of a product using digital receipt</summary>

      ### Return of a product

      When a user returns an item using a digital receipt, the POS can scan a QR code on the reciept to retreive the receipt identifier.
      A return receipt can then be created by creating a digital receipt and having a reference to the original receipt identifier in the return item description.

    </details>

    <details><summary>Digital receipt JSON schema explained</summary>

      ### Resources
      [Digital receipt JSON schema explained and example receipts](/receipt/wiki/mdwiki.html)
      will give you more information on how to create digital receipts based on the Kivra digital receipt JSON schema.
    </details>

    <details><summary>Prescription specification schema explained</summary>

      ### Resources
      [Prescription specification JSON schema explained and example specifications](/receipt/wiki/mdwiki.html)
      will give you (pharmacies) more information on how to create prescription specifications based on the Kivra prescription specification JSON schema.
    </details>    

servers:
  - url: https://sender.sandbox-api.kivra.com
    description: Test environment (uses test data)
paths:
  /dr/v1/receipts:
    post:
      description: >
        Adds a new receipt to the Kivra DRP.

        Following credentials are needed in order to create digital receipts.

        - **storeID** : this is used for the "service_id" element in the receipt body

        - **token** : the JWT bearer token used for authorization. Partner, chain or store token can be used.

        The storeID is obtained when new store is created using the addStore method.

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE

        ###  Headers

        The Content-Type must be set according to the receipt format, one of:

        * Content-Type: application/json;profile=https://se.digitalreceipts.net/schemas/json/retail/v1.0

        * Content-Type: application/xml


        When sending json receipts the profile tells what version of the JSON schema that the receipt is based on.

        When sending XML receipts the XML start element will give the XML schema(s)/version used.

        ###  Body

        Supported formats are:

        * SDRS (Swedish digital receipt standard) XML structure

        * ARTS (Association for retail technical standards) DR 2.0 XML structure

        * JSON structure


        ### IMPORTANT NOTE:

        For card payments, Kivra's SDRS scheme requires the following payment
        terminal information according to <a href="https://en.wikipedia.org/wiki/ISO_8583">ISO standard 8583</a>

        * Bank Identification Number

        * Retrieval Reference Number

        * Card Acceptor Terminal ID

        * Merchant Identifier

        * Approval Code

      operationId: CreateReceipt
      summary: Create receipt
      requestBody:
        description: Takes in a receipt object
        required: true
        content:
          ? application/json;profile=https://se.digitalreceipts.net/schemas/json/retail/v1.0
          : schema:
              type: object
            example:
              business_unit:
                service_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                organization_number: 556838-8200
                name: Demo store AB
                contact:
                  address:
                    street_address: Shopping street 20
                    locality: Onebuying
                    postal_code: "12345"
                  phone: "+460771584886"
              cashier:
                id: "5"
                name: Anna Andersson
              sales_recording_system:
                serial_number: EA38329
                name: kassa 3
              receipt_identifier:
                sequence_number: 123456
                extended_number:
                  value: "0123456123"
                  type: EAN8
                  context: store
              time_of_purchase: "2019-11-09T08:49:00+01:00"
              currency: SEK
              totals:
                - type: net
                  amount: 280
                - type: vat
                  amount: 70
                  sub_totals:
                    - amount: 70
                      net_amount: 280
                      taxable_amount: 350
                      tax_percentage: 25
                - type: gross
                  amount: 395
                - type: discount
                  amount: 45
                - type: rounding
                  amount: 0
                - type: paid
                  amount: 350
              header_text:
                type: array
                collection:
                  - "Öppettider: Mådag - Fredag 10-18 Lördag 10-15"
                  - Another header text...
              footer_text:
                type: array
                collection:
                  - "Sommarerbjudande: Köp 3 par skor få det billigaste paret på köpet."
              items:
                - type: sale
                  identifiers:
                    - identifier_type: pos
                      value: "912042"
                    - identifier_type: gtin
                      value: "1234567890"
                  description: Skor 42 - Foder BR
                  quantity:
                    value: 1
                    unit: ea
                  regular_sales_unit_price: 395
                  extended_gross_amount: 395
                  retail_price_modifiers:
                    - amount: 45
                  actual_sales_unit_price: 350
                  extended_amount: 350
                  tax_percentage: 25
                  sequence_number: 1
              payments:
                - tender:
                    type: cash
                  amount_applied_to_bill: 350
                  amount: 350
              customer:
                id:
                  phone: +46 75 777 7777
              control_unit:
                id: RIHTT102710007088
                code: BGXOV2QOHHILXHLPHHXRAYZEKGFNC2BD;
      responses:
        "201":
          description: Receipt successfully created
          headers:
            x-dr-transactionid:
              schema:
                type: string
                pattern: "^([a-z0-9]{42})$"
              example: "15662258993a2dcd45aba54f9086544f5f97c60ec4"
              description: The id of the created receipt
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Received receipt
        "202":
          description: Greenbin receipt received
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Received receipt                  
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_body:
                  value:
                    code: "40000"
                    short_message: "bad_request"
                    long_message: "body is missing required fields or has invalid fields"
                invalid_content_type:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "unsupported content type header"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
                    error_detail: "invalid service_id"
        "500":
          $ref: "#/components/responses/InternalError"
  "/dr/v1/receipts/{receiptID}":
    get:
      description: >
        Fetch a single receipt matching the passed receipt id. Returns the original receipt unmodified.

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE

      operationId: FetchReceipt
      summary: Fetch receipt
      parameters:
        - $ref: "#/components/parameters/ReceiptID"
      responses:
        "200":
          description: Receipt successfully fetched
          content:
            application/json:
              schema:
                type: object
            application/xml: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40010"
                    short_message: "bad request"
                    long_message: "unknown url paramter"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/chains:
    post:
      description: >

        Creates a chain or links to an existing chain.

        ### Access scope

          - PARTNER

        ### Matching

        To determine if this is an existing chain the following fields need to match
          - name
          - vat

        It is only possible to create one chain per VAT number.

      operationId: AddChain
      summary: Add chain
      requestBody:
        description: Takes in a chain object with required information to create a new chain
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddChain"
            example:
              name: Demo chain
              vat: "SE555555555501"
              address:
                street1: Gatan 1
                postalcode: "13254"
                city: "onebuying"
                country: SWE
              icon:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
              item_display_fields: ["article_number_pos"]
      responses:
        "200":
          description: Chain already existed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddChainResponse"
              example:
                chain_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                vat: 55555
                created: false
        "201":
          description: Chain successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddChainResponse"
              example:
                chain_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                vat: 55555
                created: true
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body is missing required fields or has invalid fields"
                invalid_content_type:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "unsupported content type header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                vat_exists:
                  value:
                    code: "40900"
                    short_message: "conflict"
                    long_message: "company with the given vat exists"
        "500":
          $ref: "#/components/responses/InternalError"
    get:
      description: >

        Fetches information on chains connected to a partner.

        ### Access scope

          - PARTNER

        ### Matching

        Fetches chains based on partner token
          - partnertoken

      operationId: GetChains
      summary: Get chains
      responses:
        "200":
          description: Successfully fetched chains
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllChainsResponse"
              example:
                - chain_id: "8a499ffa488cdce401488cf8c5d700cd"
                  partner_id: "8a499ffb488d9ca501488dc3fba0005b"
                  name: "Test Chain 1"
                  vat: SE123456789009
                  address:
                    street1: Gatan 1
                    postalcode: "13254"
                    city: "One Buying"
                    country: SWE
                  icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                  logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                - chain_id: "8a499ffa488cdce401488cf8c5d700cd"
                  partner_id: "8a499ffb488d9ca501488dc3fba0005b"
                  name: "Test Chain 2"
                  vat: SE987654321009
                  address:
                    street1: Gatan 2
                    postalcode: "23456"
                    city: "Two Buying"
                    country: SWE
                  icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6                            
                  logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"            
  /dr/v1/chains/{chainID}:
    put:
      description: >
        A partner can update chain information using this endpoint.

        ### Access scope

          - PARTNER

      operationId: UpdateChain
      summary: Update chain

      parameters:
        - $ref: "#/components/parameters/ChainID"

      requestBody:
        description: >
          Takes in a chain object with fields to be modified.

          Fields not present in the body are not modified.

        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChain"
            example:
              name: Demo chain updated
              vat: "SE555555555501"
              address:
                street1: Gatan 2
                postalcode: "13254"
                city: "onebuying"
                country: SWE
              logo:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
              item_display_fields: ["article_number_pos"]
      responses:
        "200":
          description: Chain successfully updated
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body is missing required fields or has invalid fields"
                invalid_content_type:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "unsupported content type header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                vat_exists:
                  value:
                    code: "40900"
                    short_message: "conflict"
                    long_message: "company with the given vat exists"
        "500":
          $ref: "#/components/responses/InternalError"
    get:
      description: >

        Fetches information on the given chain

        ### Access scope

          - PARTNER

      parameters:
        - $ref: "#/components/parameters/ChainID"

      operationId: GetChain
      summary: Get chain
      responses:
        "200":
          description: Successfully fetched chain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetChainResponse"
              example:
                chain_id: "012345678901234567890123456789012345678901"
                partner_id: "1561724304c592809e0b614d33a5258cf697a55fc9"
                name: "Demo chain"
                vat: SE012345678989
                address:
                  street1: Gatan 1
                  postalcode: "13254"
                  city: "onebuying"
                  country: SWE
                icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"   
  /dr/v1/chains/{chainID}/stores:
    get:
      description: >

        Fetches information on stores connected to a chain.

        ### Access scope

          - PARTNER

        ### Matching

        Fetches stores based on partner token and chain id

      operationId: GetStores
      summary: Get stores

      parameters:
        - $ref: "#/components/parameters/ChainID"

      responses:
        "200":
          description: Successfully fetched stores
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllStoresResponse"
              example:
                - store_id: "8a499ffa488cdce401488cf8c5d700cd"
                  external_id: "store-100"
                  owner_id: "8a499ffb488d9ca501488dc3fba0005b"
                  name: "Test Store 1"
                  vat: SE123456789009
                  address:
                    street1: Gatan 1
                    postalcode: "13254"
                    city: "One Buying"
                    country: SWE
                  icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                  logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                - store_id: "8a499ffa488cdce401488cf8c5d700cd"
                  external_id: "store-200"
                  owner_id: "8a499ffb488d9ca501488dc3fba0005b"
                  name: "Test Store 2"
                  vat: SE987654321009
                  address:
                    street1: Gatan 2
                    postalcode: "23456"
                    city: "Two Buying"
                    country: SWE
                  icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6                            
                  logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"            
  /dr/v1/chains/{chainID}/stores/{storeID}:
    get:
      description: >

        Fetches information on the given store.
        Same as [/dr/v1/stores/{storeID}](#operation/GetStore).

        ### Access scope

          - PARTNER

        ### Matching

        Fetches store based on chain and store id

      operationId: GetStore2
      summary: Get store

      parameters:
        - $ref: "#/components/parameters/ChainID"
        - $ref: "#/components/parameters/StoreID"

      responses:
        "200":
          description: Successfully fetched stores
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoreResponse"
              example:
                store_id: "8a499ffa488cdce401488cf8c5d700cd"
                external_id: "store-100"
                owner_id: "8a499ffb488d9ca501488dc3fba0005b"
                name: "Test Store 1"
                vat: SE123456789009
                address:
                  street1: Gatan 1
                  postalcode: "13254"
                  city: "One Buying"
                  country: SWE
                icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"                      
  /dr/v1/stores:
    post:
      description: >
        Creates a store or link to an existing store using this endpoint.

        ### Access scope

          - PARTNER
          - CHAIN

        ### Using external ID


        If external ID is provided in the body a new store is created using the external ID. If the external id already exists an error is returned.


        ### Without external ID (Deprecated)

        If external ID is not provided we determine if this is an existing store based on the following fields
          - name
          - vat
          - owner_id

        It is possible to create multiple stores with the same VAT, however they all need to belong to the same owner (chain).


      operationId: AddStore
      summary: Add store
      requestBody:
        description: Takes in a store object with required information to create a new store
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddStore"
            example:
              external_id: ex000001
              name: Demo store
              vat: SE012345678989
              owner_id: "1593602546268ce6ece6cf49969f52f8a724e6f1f5"
              address:
                street1: Gatan 1
                postalcode: "13254"
                city: "onebuying"
                country: SWE
              icon:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
              logo:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
      responses:
        "200":
          description: Store already existed, only of no external_id is provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddStoreResponse"
              example:
                store_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                vat: SE012345678989
                created: false
        "201":
          description: Store successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddStoreResponse"
              example:
                store_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                vat: SE012345678989
                external_id: ex000001
                created: true
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body is missing required fields or has invalid fields"
                invalid_content_type:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "unsupported content type header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                vat_exists:
                  value:
                    code: "40900"
                    short_message: "conflict"
                    long_message: "company with the given vat exists"
        "500":
          $ref: "#/components/responses/InternalError"
    get:
      description: >
        Fetch information on the given store using external store ID

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE

      operationId: GetStoreByID
      summary: Get store

      parameters:
        - $ref: "#/components/parameters/ExternalIDQuery"
        - $ref: "#/components/parameters/OwnerIDQuery"

      responses:
        "200":
          description: Successfully fetched store
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoreResponse"
              example:
                store_id: "012345678901234567890123456789012345678901"
                external_id: "ex000001"
                owner_id: "8a499ffb488d9ca501488dc3fba0005b"
                name: "Demo Store"
                vat: SE012345678989
                address:
                  street1: Gatan 1
                  postalcode: "13254"
                  city: "One Buying"
                  country: SWE
                icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6              
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/stores/{StoreID}:
    get:
      description: >
        Fetch information on the given store

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE

      operationId: GetStore
      summary: Get store

      parameters:
        - $ref: "#/components/parameters/StoreID"

      responses:
        "200":
          description: Successfully fetched store
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoreResponse"
              example:
                store_id: "012345678901234567890123456789012345678901"
                external_id: "ex000001"
                owner_id: "8a499ffb488d9ca501488dc3fba0005b"
                name: "Demo Store"
                vat: SE012345678989
                address:
                  street1: Gatan 1
                  postalcode: "13254"
                  city: "One Buying"
                  country: SWE
                icon_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6
                logo_url: https://test.url.net/api/v1/resources/156257243392d65d706e044b56b168c452809d68f6              
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
    put:
      description: >

        A partner can update store information using this endpoint.

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE

      operationId: UpdateStore
      summary: Update store

      parameters:
        - $ref: "#/components/parameters/StoreID"

      requestBody:
        description: >
          Takes in a store object with fields to be modified.

          Fields not present in the body are not modified.

        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStore"
            example:
              name: Demo store
              vat: "SE123456789100"
              owner_id: "1593602546268ce6ece6cf49969f52f8a724e6f1f5"
              address:
                street1: Gatan 1
                postalcode: "13254"
                city: "onebuying"
                country: SWE
              icon:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
              logo:
                data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII="
                content_type: "image/png"
      responses:
        "200":
          description: Store successfully updated
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                vat_exists:
                  value:
                    code: "40900"
                    short_message: "conflict"
                    long_message: "company with the given vat exists"
        "500":
          $ref: "#/components/responses/InternalError"

  /dr/v1/auth/token:
    post:
      summary: Fetch JWT authentication token using OAuth client credential grant
      description: >
        Requires client_id and client_secret

      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - client_credentials
                client_id:
                  type: string
                client_secret:
                  type: string
              required:
                - grant_type
                - client_id
                - client_secret
      responses:
        "200":
          $ref: "#/components/responses/Token"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
                invalid_header:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "missing required header or invalid header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/auth/token/chain/{chainID}:
    post:
      summary: Fetch JWT authentication token for a chain using partner token
      description: >
        ### Access scope

          - PARTNER

      parameters:
        - $ref: "#/components/parameters/ChainID"

      responses:
        "200":
          $ref: "#/components/responses/Token"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
                invalid_header:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "missing required header or invalid header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/auth/token/store/{StoreID}:
    post:
      summary: Fetch JWT authentication token for a store using partner or chain token
      description: >
        ### Access scope

          - PARTNER
          - CHAIN

      parameters:
        - $ref: "#/components/parameters/StoreID"

      responses:
        "200":
          $ref: "#/components/responses/Token"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_body:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
                invalid_header:
                  value:
                    code: "40002"
                    short_message: "bad request"
                    long_message: "missing required header or invalid header"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/users/{type}/{id}:
    get:
      summary: Check if a user with the given id exists
      description: >
        The user lookup checks if a given identifier is connected to a Kivra user. We recommend to hash (sha256) the identifier before
        doing the lookup except if a cardtoken is used. The cardtoken MUST NOT be hashed.
        
        
        **NOTE!** A user can reject receipts from any chain so if a partner token is used when doing the user lookup
        a chain id must be passed.

        ### Access scope

          - PARTNER
          - CHAIN
          - STORE
      parameters:
        - $ref: "#/components/parameters/IdentifierType"
        - $ref: "#/components/parameters/IdentifierID"
        - $ref: "#/components/parameters/PartnerChainID"
        - $ref: "#/components/parameters/Hashed"

      responses:
        "204":
          description: User exists
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                person_not_found:
                  value:
                    code: "40005"
                    short_message: "bad request"
                    long_message: "person not found"
                unknown_url_parameter:
                  value:
                    code: "40010"
                    short_message: "bad request"
                    long_message: "unknown url parameter"
                invalid_identifier:
                  value:
                    code: "40012"
                    short_message: "bad request"
                    long_message: "invalid identifier"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/expense/register:
    post:
      summary: Register a new Expense Management System(EMS)
      description: >
        ### Access scope

          - EMS

      requestBody:
        description: Takes in a expense management object with required information to create a new expense management system
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterEMS"
            example:
              external_id: "0123456789abcdef0123456789abcdef01234567890"
              name: Company Expense
              icon_url: https://www.ems.se/icon
              url: https://api.ems.se/v1
      responses:
        "201":
          description: Expense management sucessfully created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/expense/authorise:
    get:
      summary: Start the authorisation process for a registering a person for an EMS
      description: >
        Start the authorisation process for a registering a person for an EMS. Currently only BankID is supported
      parameters:
        - $ref: "#/components/parameters/ClientID"
        - $ref: "#/components/parameters/RedirectURI"
        - $ref: "#/components/parameters/StateParam"
      responses:
        "200":
          description: HTML template to start the authorisation application
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40011"
                    short_message: "bad request"
                    long_message: "invalid query parameter"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/expense/person:
    post:
      summary: Register a person for an EMS
      description: >

        ### Access scope

          - EMS

      requestBody:
        description: Takes in a register person for ems object with required information to register a person for an EMS
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterPersonForEMS"
            example:
              external_id: "0123456789abcdef0123456789abcdef01234567890"
              owner_id: "191039d537408dbaa8a22a0097a7f962301b36b360fe"
              token: "example_token_for_191039d537408dbaa8a22a0097a7f962301b36b360fe_and_0123456789abcdef0123456789abcdef01234567890"
      responses:
        "201":
          description: Implicit person successfully registered for an EMS
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/expense/person/deregister:
    post:
      summary: De-register a person from an EMS
      description: >

        ### Access scope

          - EMS

      requestBody:
        description: Takes in a de-register person for ems object with required information to de-register a person from an EMS
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeregisterPersonForEMS"
            example:
              external_id: "0123456789abcdef0123456789abcdef01234567890"
              owner_id: "191039d537408dbaa8a22a0097a7f962301b36b360fe"
      responses:
        "204":
          description: Implicit person successfully de-registered from an EMS
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40000"
                    short_message: "bad request"
                    long_message: "body s missing required fields or has invalid fields"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"
  /dr/v1/expense/receipts/{receiptID}:
    delete:
      summary: De-register a person from an EMS
      description: >

        ### Access scope

          - EMS

      parameters:
        - $ref: "#/components/parameters/ReceiptID"
      responses:
        "204":
          description: Receipt successfully removed from expense system
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                unauthorized:
                  value:
                    code: "40100"
                    short_message: "unauthorized"
                    long_message: "permission denied"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                resource_not_found:
                  value:
                    code: "40400"
                    short_message: "not found"
                    long_message: "the requested resource could not be found"
        "500":
          $ref: "#/components/responses/InternalError"

  /dr/v1/prescription-specifications:
    post:
      description:  >
        Adds a new prescription specification to the Kivra DRP.

        Following credentials are needed in order to create prescription specifications.

        - **storeID** : add to the "service_id" element in the prescription specification body

        - **token** : the JWT bearer token used for authorization. Partner, chain or store token can be used.

          Creates a new prescription specification

          ### Access scope

            - PARTNER
            - CHAIN

          ###  Headers

          The Content-Type must be set according to the prescription specification format:

          * Content-Type: application/json;profile=https://se.kivra.com/schemas/json/retail/ps/v1.0


          The profile tells what version of the JSON schema that the prescription specification is based on.
          

          ###  Body

          Supported formats are:
          * JSON structure

      operationId: CreatePresciptionSpecification
      summary: Create prescription specification
      requestBody:
        description: Creates a prescription specification
        required: true
        content:
          application/json:
            schema:
              oneOf: 
                - $ref: '#/components/schemas/HumanPS'
                - $ref: '#/components/schemas/AnimalPS'
            example:
              business_unit:
                service_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                organization_number: 556838-8200
                name: Demo store AB
                contact:
                  address:
                    street_address: Shopping street 20
                    locality: Onebuying
                    postal_code: "12345"
                  phone: "+460771584886"
              cashier:
                id: "5"
                name: Anna Andersson
              receipt_identifier:
                sequence_number: 123456
                extended_number:
                  value: "0123456123"
                  type: EAN8
                  context: store
              time_of_purchase: "2019-11-09T08:49:00+01:00"
              customer:
                id: 
                  birth_date: "19900805"
                name: "Knapp, Lena"
              expedition: 
                id: "T02 AAN631"
                details: 
                  - "Inköp på expedition T02 AAN631"
              human: 
                high_cost:
                  previous_period: 
                    gross: 8982.64
                    net: 2350.0
                    start_date: "2021-07-12T08:00:00+02:00"
                  current_period:
                    gross: 28198.71
                    net: 2400.0
                    start_date: "2022-08-12T08:00:00+02:00"
                  next_period:
                    gross: 0.0
                    net: 0.0
                    start_date: "2023-08-13T08:00:00+02:00"
                  amount_left_to_reimbursement:
                    gross: 100.00
                    net: 100.00
              amount_with_benefit: 58.27
              amount_without_benefit: 5.38
              amount_paid_by_benefit: 58.27
              amount_to_pay: 5.38
                
      parameters: []
      responses:
        "201":
          description: Presciption specification successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresciptionSpecificationResponse'
              example:
                receipt_id: 15594097555922f97bfeb148d6b9a6ef76f76ebdce
                prescription_specification_id: 17594097555904f97adeb148d6b9a6ef76f76ebdba
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_body:
                  value:
                    error_code: "40000"
                    error_message: "body is missing from the request"
                invalid_body:
                  value:
                    error_code: "40001"
                    error_message: "body is missing required fields or has invalid fields"
                invalid_content_type:
                  value:
                    error_code: "40002"
                    error_message: "unsupported content type header"
                resource_not_found:
                  value:
                    error_code: "40004"
                    error_message: "resource not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                token_missing:
                  value:
                    error_code: "40100"
                    error_message: "jwt token missing"
                token_expired:
                  value:
                    error_code: "40101"
                    error_message: "jwt token expired"
                token_invalid:
                  value:
                    error_code: "40102"
                    error_message: "jwt token invalid"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    TokenResponse:
      title: TokenResponse
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum:
            - Bearer
        expires_in:
          description: expiration time in seconds
          type: integer
    AddStoreResponse:
      title: AddStoreResponse
      type: object
      properties:
        store_id:
          type: string
        vat:
          type: string
        external_id:
          type: string
        created:
          type: boolean
    AddChainResponse:
      title: AddChainResponse
      type: object
      properties:
        chain_id:
          type: string
        vat:
          type: string
        created:
          type: boolean
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        code:
          type: string
        short_message:
          type: string
        long_message:
          type: string
        error_detail:
          type: array
          items:
            type: string
    PresciptionSpecificationResponse:
      title: PresciptionSpecificationResponse
      type: object
      properties:
        receipt_id:
          type: string
        prescription_specification_id:
          type: string
    AddStore:
      title: AddStore
      type: object
      properties:
        externalid:
          type: string
          description: ID provided by the POS that is unique per chain
        name:
          type: string
          description: The name of the store
          minLength: 1
        vat:
          type: string
          description: The VAT number of the store
          pattern: ^((SE)?[0-9]{12})$"
        owner_id:
          type: string
          description: ID of the owner company (chain)
          pattern: "^([a-z0-9]{42})$"
        phone:
          type: string
          description: The phone number of the store
        address:
          type: object
          description: The address of the store
          properties:
            street1:
              type: string
            street2:
              type: string
            street3:
              type: string
            postalcode:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
              maxLength: 3
              minLength: 3
          required:
            - street1
            - postalcode
            - country
        icon:
          type: object
          description: Icon displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        logo:
          type: object
          description: Logo displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
      required:
        - name
        - vat
        - owner_id
    UpdateStore:
      title: UpdateStore
      type: object
      properties:
        name:
          type: string
          description: The name of the store
          minLength: 1
        vat:
          type: string
          description: The VAT number of the store
          pattern: ^((SE)?[0-9]{12})$"
        owner_id:
          type: string
          description: ID of the owner company (chain)
          pattern: "^([a-z0-9]{42})$"
        phone:
          type: string
          description: The phone number of the store
        address:
          type: object
          description: The address of the store
          properties:
            street1:
              type: string
            street2:
              type: string
            street3:
              type: string
            postalcode:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
              maxLength: 3
              minLength: 3
        icon:
          type: object
          description: Icon displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        logo:
          type: object
          description: Logo displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
    AddChain:
      title: AddChain
      type: object
      properties:
        name:
          type: string
          description: The name of the store
          minLength: 1
        vat:
          type: string
          description: The VAT number of the store
          pattern: ^((SE)?[0-9]{12})$"
        phone:
          type: string
          description: The phone number of the store
        address:
          type: object
          description: The address of the store
          properties:
            street1:
              type: string
            street2:
              type: string
            street3:
              type: string
            postalcode:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
              maxLength: 3
              minLength: 3
          required:
            - street1
            - postalcode
            - country
        icon:
          type: object
          description: Icon displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        logo:
          type: object
          description: Logo displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        item_display_fields:
          type: array
          description: The extra fields from receipt items that should be displayed in the app
          items:
            type: string
            enum: [article_number_pos,article_number_gtin]
      required:
        - name
        - vat
    UpdateChain:
      title: UpdateChain
      type: object
      properties:
        name:
          type: string
          description: The name of the chain
          minLength: 1
        vat:
          type: string
          description: The VAT number of the chain
          pattern: ^((SE)?[0-9]{12})$"
        phone:
          type: string
          description: The phone number of the chain
        address:
          type: object
          description: The address of the chain
          properties:
            street1:
              type: string
            street2:
              type: string
            street3:
              type: string
            postalcode:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
              maxLength: 3
              minLength: 3
        icon:
          type: object
          description: Icon displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        logo:
          type: object
          description: Logo displayed on the receipt
          properties:
            data:
              type: string
              description: Base64 encoded image
            content_type:
              type: string
              description: The image content type
          required:
            - data
            - content_type
        item_display_fields:
          type: array
          description: The extra fields from receipt items that should be displayed in the app
          items:
            type: string
            enum: [article_number_pos,article_number_gtin]

    RegisterEMS:
      title: RegisterEMS
      type: object
      properties:
        external_id:
          type: string
          description: External ID of the expense management system that identifies it in foreign system
        name:
          type: string
          description: The name of the expense management system
          minLength: 1
        url:
          type: string
          description: A URL that points to the root URL of the foreign EMS API
        icon_url:
          type: string
          description: An optional icon URL that represents the full URL to an icon belonging to the EMS
    RegisterPersonForEMS:
      title: RegisterPersonForEMS
      type: object
      properties:
        external_id:
          type: string
          description: External ID of the expense management system that identifies it in foreign system
        owner_id:
          type: string
          description: The id of the person registering for expense management system
          minLength: 1
        token:
          type: string
          description: A token to use when expensing a receipt for this person in the foreign EMS
    DeregisterPersonForEMS:
      title: DeregisterPersonForEMS
      type: object
      properties:
        external_id:
          type: string
          description: External ID of the expense management system that identifies it in foreign system
        owner_id:
          type: string
          description: The id of the person registering for expense management system
          minLength: 1
    
    customer_ssn:
      type: object
      description: The customer ssn
      properties:
        civic_registration_number:
          type: string
          pattern: ^[12]{1}[90]{1}[0-9]{6}-?[0-9]{4}$
          description: swedish personnummer 12 digits
      additionalProperties: false                                          
    
    customer_birth_date:
      type: object
      description: The customer birth date
      properties:
        birth_date:
          type: string
          pattern: ^[12]{1}[90]{1}[0-9]{6}$
          description: birth date 10 digits for customers without Swedish ssn
      additionalProperties: false     

    customer_company_registration_number:
      type: object
      description: The customer company registration number
      properties:
        company_registration_number:
          type: string
          description: swedish organisationsnummer or VAT when the customer is a company
      additionalProperties: false                                                       

    HumanPS:
      description: Prescription specification schema
      type: object
      properties:
        business_unit:
          description: Merchant information
          type: object
          properties:
            name:
              type: string
            service_id:
              description: Id created when then business is registered within Kivra
              type: string
              minLength: 42
              maxLength: 42
              pattern: ^[0-9]{10}[0-9a-fA-F]{32}$
            unit_id:
              type: string
              description: Internal shop/business unit id
            organization_number:
              type: string
              description: Swedish organisationsnummer or vat reg number
            contact:
              type: object
              description: Merchant contact information name, address, phone etc
              properties:
                address:
                  title: address
                  description: An address following the convention of http://microformats.org/wiki/hcard
                  type: object
                  properties:
                    street_address:
                      type: string
                    extended_address:
                      type: string
                    post_box:
                      type: string
                    locality:
                      type: string
                    postal_code:
                      type: string
                    region:
                      type: string
                    country_name:
                      type: string
                    type:
                      type: object
                      title: address type
                      description: is address (physical/email) related to business, home, etc
                      properties:
                        type:
                          enum:
                            - home
                            - business
                  anyOf:
                    - required:
                        - street_address
                    - required:
                        - post_box
                  required:
                    - locality
                    - postal_code
                email:
                  type: string
                  format: email
                phone:
                  title: generic phone number
                  description: generic format for phone numbers where strict format can not be enforced, use only for phone number to be displayed
                  type: string
                  pattern: ^(\(?((\+|(00))[0-9]{1,3})\)?)?( ?-?\(?[0-9]+\)?)+$
                website:
                  type: string
                  format: uri
            geo_location:
              type: object
              title: Geographic location (long/lat)
              description: A geographical coordinate
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
              required:
                - latitude
                - longitude
          required:
            - name
            - service_id
            - organization_number
            - contact
        cashier:
          description: Identifies the person handling the purchase if applicable
          title: cashier name and id
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        receipt_identifier:
          description: 'Receipt identifiers: sequence number and/or extended number with or without barcode representation'
          title: receipt identifier
          type: object
          properties:
            sequence_number:
              type: integer
              description: a sequence number as stipulated by the swedish tax authorities
            extended_number:
              type: object
              description: a more complex receipt number if applicable, must be unique in given context
              properties:
                value:
                  type: string
                  description: Data which, together with context, will connect the PS to a receipt
                type:
                  type: string
                  enum:
                    - Interleaved2Of5
                    - EAN13
                    - EAN8
                    - Codabar
                    - Code39
                    - Code93
                    - Code128
                    - AztecCode
                    - Datamatrix
                    - PDF417
                    - QRCode
                  description: barcode representation of any data
                context:
                  type: string
                  enum:
                    - store
                    - chain
                    - global
                  description: in what context is the value (receipt number) unique, note GLOBAL can only be used if a digital receipt provider receipt id is used
              required:
                - value
                - context
          required:
            - extended_number
        time_of_purchase:
          description: 'ISO 8601 date/time format: YYYY-MM-DDThh:mm:ssTZD'
          type: string
          format: date-time
        currency:
          description: This gives the currency for all amounts in the specifications. SEK is the default if not given.
          title: ISO-4217 currency codes
          type: string
          pattern: ^[a-zA-Z]{3}$
        amount_with_benefit:
          type: number
          minimum: 0
        amount_without_benefit:
          type: number
          minimum: 0
        amount_paid_by_benefit:
          type: number
          minimum: 0
        amount_to_pay:
          type: number
          minimum: 0
        customer:
          description: The person to whom the prescription is issued.
          allOf:
            - type: object
              description: Defines valid customer identifiers
              properties:
                id:
                  oneOf:
                    - $ref: "#/components/schemas/customer_ssn"
                    - $ref: "#/components/schemas/customer_birth_date"     
                    - $ref: "#/components/schemas/customer_company_registration_number"
            - type: object
              description: Defines customer information, like name, address, loyalty program.
              properties:
                name:
                  type: string
                contact:
                  type: object
                  properties:
                    address:
                      title: address
                      description: An address following the convention of http://microformats.org/wiki/hcard
                      type: object
                      properties:
                        street_address:
                          type: string
                        extended_address:
                          type: string
                        post_box:
                          type: string
                        locality:
                          type: string
                        postal_code:
                          type: string
                        region:
                          type: string
                        country_name:
                          type: string
                        type:
                          type: object
                          title: address type
                          description: is address (physical/email) related to business, home, etc
                          properties:
                            type:
                              enum:
                                - home
                                - business
                      anyOf:
                        - required:
                            - street_address
                        - required:
                            - post_box
                      required:
                        - locality
                        - postal_code
                    email:
                      type: string
                      format: email
                    phone:
                      title: generic phone number
                      description: generic format for phone numbers where strict format can not be enforced, use only for phone number to be displayed
                      type: string
                      pattern: ^(\(?((\+|(00))[0-9]{1,3})\)?)?( ?-?\(?[0-9]+\)?)+$
                  additionalProperties: false
                geo_location:
                  type: object
                  title: Geographic location (long/lat)
                  description: A geographical coordinate
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                  required:
                    - latitude
                    - longitude
              required: 
                - id
                - name
              additionalProperties: false
        human:
          properties:
            high_cost:
              description: Defines properties related to high cost reimbursement
              type: object
              properties:
                previous_period:
                  type: object
                  properties:
                    gross:
                      type: number
                    net:
                      type: number
                    start_date:
                      description: 'high cost period start date-time, ISO 8601 date/time format: YYYY-MM-DDThh:mm:ssTZD'
                      type: string
                      format: date-time
                  required:
                    - gross
                    - net
                    - start_date
                  additionalProperties: false
                current_period:
                  type: object
                  properties:
                    gross:
                      type: number
                    net:
                      type: number
                    start_date:
                      description: 'high cost period start date-time, ISO 8601 date/time format: YYYY-MM-DDThh:mm:ssTZD'
                      type: string
                      format: date-time
                  required:
                    - gross
                    - net
                    - start_date
                  additionalProperties: false
                next_period:
                  type: object
                  properties:
                    gross:
                      type: number
                    net:
                      type: number
                    start_date:
                      description: 'high cost period start date-time, ISO 8601 date/time format: YYYY-MM-DDThh:mm:ssTZD'
                      type: string
                      format: date-time
                  required:
                    - gross
                    - net
                    - start_date
                  additionalProperties: false
                amount_left_to_reimbursement:
                  description: The amount left to high cost reimbursement
                  type: object
                  properties:
                    gross:
                      type: number
                      minimum: 0
                    net:
                      type: number
                      minimum: 0
                  required:
                    - gross
                    - net
                  additionalProperties: false
              allOf:
                - required:
                    - previous_period
                - required:
                    - current_period
                - required:
                    - next_period
              additionalProperties: false
          required:
            - high_cost
          additionalProperties: false
        expedition:
          type: object
          properties:
            id:
              description: Expedition id, prescription id, etc
              type: string
            details:
              description: The content of details is displayed to the user
              type: array
              minItems: 1
              items:
                type: string
          required:
            - id
            - details
          additionalProperties: false
      required:
        - human
        - amount_with_benefit
      allOf:
        - required:
            - business_unit
        - required:
            - cashier
        - required:
            - receipt_identifier
        - required:
            - time_of_purchase
        - required:
            - customer            
        - required:
            - amount_without_benefit
        - required:
            - amount_to_pay
        - required:
            - expedition
      additionalProperties: false
    
    AnimalPS:
      description: Prescription specification schema
      type: object
      properties:
        business_unit:
          description: Merchant information
          type: object
          properties:
            name:
              type: string
            service_id:
              description: Id created when then business is registered within Kivra
              type: string
              minLength: 42
              maxLength: 42
              pattern: ^[0-9]{10}[0-9a-fA-F]{32}$
            unit_id:
              type: string
              description: Internal shop/business unit id
            organization_number:
              type: string
              description: Swedish organisationsnummer or vat reg number
            contact:
              type: object
              description: Merchant contact information name, address, phone etc
              properties:
                address:
                  title: address
                  description: An address following the convention of http://microformats.org/wiki/hcard
                  type: object
                  properties:
                    street_address:
                      type: string
                    extended_address:
                      type: string
                    post_box:
                      type: string
                    locality:
                      type: string
                    postal_code:
                      type: string
                    region:
                      type: string
                    country_name:
                      type: string
                    type:
                      type: object
                      title: address type
                      description: is address (physical/email) related to business, home, etc
                      properties:
                        type:
                          enum:
                            - home
                            - business
                  anyOf:
                    - required:
                        - street_address
                    - required:
                        - post_box
                  required:
                    - locality
                    - postal_code
                email:
                  type: string
                  format: email
                phone:
                  title: generic phone number
                  description: generic format for phone numbers where strict format can not be enforced, use only for phone number to be displayed
                  type: string
                  pattern: ^(\(?((\+|(00))[0-9]{1,3})\)?)?( ?-?\(?[0-9]+\)?)+$
                website:
                  type: string
                  format: uri
            geo_location:
              type: object
              title: Geographic location (long/lat)
              description: A geographical coordinate
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
              required:
                - latitude
                - longitude
          required:
            - name
            - service_id
            - organization_number
            - contact
        cashier:
          description: Identifies the person handling the purchase if applicable
          title: cashier name and id
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        receipt_identifier:
          description: 'Receipt identifiers: sequence number and/or extended number'
          title: receipt identifier
          type: object
          properties:
            sequence_number:
              type: integer
              description: a sequence number as stipulated by the swedish tax authorities
            extended_number:
              type: object
              description: a more complex receipt number if applicable, must be unique in given context
              properties:
                value:
                  type: string
                  description: Data which, together with context, will connect the PS to a receipt
                type:
                  type: string
                  enum:
                    - Interleaved2Of5
                    - EAN13
                    - EAN8
                    - Codabar
                    - Code39
                    - Code93
                    - Code128
                    - AztecCode
                    - Datamatrix
                    - PDF417
                    - QRCode
                  description: barcode representation of any data
                context:
                  type: string
                  enum:
                    - store
                    - chain
                    - global
                  description: in what context is the value (receipt number) unique, note GLOBAL can only be used if a digital receipt provider receipt id is used
              required:
                - value
                - context
          required:
            - extended_number
        time_of_purchase:
          description: 'ISO 8601 date/time format: YYYY-MM-DDThh:mm:ssTZD'
          type: string
          format: date-time
        currency:
          description: This gives the currency for all amounts in the specifications. SEK is the default if not given.
          title: ISO-4217 currency codes
          type: string
          pattern: ^[a-zA-Z]{3}$
        amount_without_benefit:
          type: number
          minimum: 0
        amount_to_pay:
          type: number
          minimum: 0
        customer:
          description: The animal owner to whom the prescription is issued.
          allOf:
            - type: object
              description: Defines valid customer identifiers
              properties:
                id:
                  oneOf:
                    - $ref: "#/components/schemas/customer_ssn"
                    - $ref: "#/components/schemas/customer_birth_date"     
                    - $ref: "#/components/schemas/customer_company_registration_number"
            - type: object
              description: Defines customer information, like name, address, loyalty program.
              properties:
                name:
                  type: string
                contact:
                  type: object
                  properties:
                    address:
                      title: address
                      description: An address following the convention of http://microformats.org/wiki/hcard
                      type: object
                      properties:
                        street_address:
                          type: string
                        extended_address:
                          type: string
                        post_box:
                          type: string
                        locality:
                          type: string
                        postal_code:
                          type: string
                        region:
                          type: string
                        country_name:
                          type: string
                        type:
                          type: object
                          title: address type
                          description: is address (physical/email) related to business, home, etc
                          properties:
                            type:
                              enum:
                                - home
                                - business
                      anyOf:
                        - required:
                            - street_address
                        - required:
                            - post_box
                      required:
                        - locality
                        - postal_code
                    email:
                      type: string
                      format: email
                    phone:
                      title: generic phone number
                      description: generic format for phone numbers where strict format can not be enforced, use only for phone number to be displayed
                      type: string
                      pattern: ^(\(?((\+|(00))[0-9]{1,3})\)?)?( ?-?\(?[0-9]+\)?)+$
                  additionalProperties: false
                geo_location:
                  type: object
                  title: Geographic location (long/lat)
                  description: A geographical coordinate
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                  required:
                    - latitude
                    - longitude
              required: 
                - id
                - name
              additionalProperties: false
        animal:
          type: object
          description: Specific properties related to animal prescriptions
          properties:
            id:
              description: Usually animal name
              type: string
          required:
            - id
          additionalProperties: false
        medications:
          type: array
          description: medications etc, connected to this spec
          items:
            type: object
            properties:
              description:
                type: string
              amount:
                type: number
            required:
              - description
            additionalProperties: false
        expedition:
          type: object
          properties:
            id:
              description: Expedition id, prescription id, etc
              type: string
            details:
              description: The content of details is displayed to the user
              type: array
              minItems: 1
              items:
                type: string
          required:
            - id
            - details
          additionalProperties: false
      required:
        - animal
      allOf:
        - required:
            - business_unit
        - required:
            - cashier
        - required:
            - receipt_identifier
        - required:
            - time_of_purchase
        - required:
            - customer            
        - required:
            - amount_without_benefit
        - required:
            - amount_to_pay
        - required:
            - expedition
      additionalProperties: false

    PrescriptionSpecificationResponse:
      title: PrescriptionSpecificationResponse
      type: object
      properties:
        receipt_id:
          type: string
        prescription_specification_id:
          type: string
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    ReceiptID:
      name: receiptID
      in: path
      description: Receipt ID
      required: true
      schema:
        type: string
    ChainID:
      name: chainID
      in: path
      description: Chain ID
      required: true
      schema:
        type: string
    PartnerChainID:
      name: chain_id
      in: query
      description: The chain ID is required if using a partner token
      required: false
      schema:
        type: string
    StoreID:
      name: StoreID
      in: path
      description: Store ID
      required: true
      schema:
        type: string
    ExternalIDQuery:
      name: external_id
      in: query
      description: External ID of the store
      required: false
      schema:
        type: string
    OwnerIDQuery:
      name: owner_id
      in: query
      description: Represents the id of the chain the store belongs to. Only required when using partner token
      required: false
      schema:
        type: string
    ClientID:
      name: client_id
      in: query
      required: true
      description: Combination of EMS external id and EMS company id
      schema:
        type: string
      example: 157200307788dc2ecacb9e412a9a215df8f897bb53-16200214
    RedirectURI:
      name: redirect_uri
      in: query
      required: true
      description: redirect uri to the external system trying to authorise
      schema:
        type: string
      example: https://api.ems.se/
    StateParam:
      name: state
      in: query
      required: true
      description: state parameter provided by external system for verification with the callback
      schema:
        type: string
      example: ce3mwhfZSnvNJ%2FActq9MUD2yCgXGRzHJEsD5nLMTznCZDecwHqfPe1npcz5aY6W7L1Z0csbflCTM5iulelYXGXvrX0jfqeXiWPK8vOuGx0zbnIlcC7sDBjkfIm0iXc%2Fk

    IdentifierType:
      name: type
      in: path
      description: "The type of identifier given"
      required: true
      schema:
        type: string
        enum: [nationalidentitynumber,mobilephone, email]
    IdentifierID:
      name: id
      in: path
      description: "The value of the identifier"
      required: true
      schema:
        type: string
    Hashed:
      name: hashed
      in: query
      description: "Determinied if the identifier is given as hashed value or in cleartext"
      required: true
      schema:
        type: boolean
        default: true
  responses:
    UserDoesntError:
      description: User does not exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            { "code": "40401", "short_message": "not found", "long_message": "The requested resource could not be found" }
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            value:
              code: "40100"
              short_message: "unauthorized"
              long_message: "permission denied"
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            code: "50000"
            short_message: "internal server error"
            long_message: "unknown error ocurred"
    Token:
      description: Token successfully created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenResponse"
          example:
            {
              "access_token": "<JWT token>",
              "token_type": "Bearer",
              "expires_in": 86000,
            }
